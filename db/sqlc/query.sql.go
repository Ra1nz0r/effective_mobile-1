// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const addArtist = `-- name: AddArtist :one
INSERT INTO artist ("group")
VALUES ($1)
RETURNING id, "group"
`

func (q *Queries) AddArtist(ctx context.Context, group string) (Artist, error) {
	row := q.db.QueryRowContext(ctx, addArtist, group)
	var i Artist
	err := row.Scan(&i.ID, &i.Group)
	return i, err
}

const addSongWithID = `-- name: AddSongWithID :one
INSERT INTO library (group_id, "song")
VALUES ($1, $2)
RETURNING id, group_id, song, "releaseDate", text, link
`

type AddSongWithIDParams struct {
	GroupID int32  `json:"group_id"`
	Song    string `json:"song"`
}

func (q *Queries) AddSongWithID(ctx context.Context, arg AddSongWithIDParams) (Library, error) {
	row := q.db.QueryRowContext(ctx, addSongWithID, arg.GroupID, arg.Song)
	var i Library
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.Song,
		&i.ReleaseDate,
		&i.Text,
		&i.Link,
	)
	return i, err
}

const checkSongWithID = `-- name: CheckSongWithID :one
SELECT EXISTS (
        SELECT 1
        FROM library
        WHERE group_id = $1
            AND song = $2
    )
`

type CheckSongWithIDParams struct {
	GroupID int32  `json:"group_id"`
	Song    string `json:"song"`
}

func (q *Queries) CheckSongWithID(ctx context.Context, arg CheckSongWithIDParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkSongWithID, arg.GroupID, arg.Song)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const delete = `-- name: Delete :exec
DELETE FROM library
WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, delete, id)
	return err
}

const fetch = `-- name: Fetch :exec
UPDATE library
SET "releaseDate" = $2,
    text = $3,
    link = $4
WHERE id = $1
`

type FetchParams struct {
	ID          int32     `json:"id"`
	ReleaseDate time.Time `json:"releaseDate"`
	Text        string    `json:"text"`
	Link        string    `json:"link"`
}

func (q *Queries) Fetch(ctx context.Context, arg FetchParams) error {
	_, err := q.db.ExecContext(ctx, fetch,
		arg.ID,
		arg.ReleaseDate,
		arg.Text,
		arg.Link,
	)
	return err
}

const getArtistID = `-- name: GetArtistID :one
SELECT id
FROM artist
WHERE "group" = $1
LIMIT 1
`

func (q *Queries) GetArtistID(ctx context.Context, group string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getArtistID, group)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getOne = `-- name: GetOne :one
SELECT id, group_id, song, "releaseDate", text, link
FROM library
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetOne(ctx context.Context, id int32) (Library, error) {
	row := q.db.QueryRowContext(ctx, getOne, id)
	var i Library
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.Song,
		&i.ReleaseDate,
		&i.Text,
		&i.Link,
	)
	return i, err
}

const getText = `-- name: GetText :one
SELECT library.id,
    artist."group",
    library.song,
    library.text
FROM library
    JOIN artist ON library.group_id = artist.id
WHERE library.id = $1
LIMIT 1
`

type GetTextRow struct {
	ID    int32  `json:"id"`
	Group string `json:"group"`
	Song  string `json:"song"`
	Text  string `json:"text"`
}

func (q *Queries) GetText(ctx context.Context, id int32) (GetTextRow, error) {
	row := q.db.QueryRowContext(ctx, getText, id)
	var i GetTextRow
	err := row.Scan(
		&i.ID,
		&i.Group,
		&i.Song,
		&i.Text,
	)
	return i, err
}

const listWithFilters = `-- name: ListWithFilters :many
SELECT library.id,
    artist."group",
    library.song,
    library."releaseDate",
    library.text,
    library.link
FROM library
    JOIN artist ON library.group_id = artist.id
WHERE (
        artist."group" ILIKE '%' || $1 || '%'
        OR $1 IS NULL
    )
    AND (
        library.song ILIKE '%' || $2 || '%'
        OR $2 IS NULL
    )
    AND (
        library."releaseDate" >= $3
        OR $3 IS NULL
    )
    AND (
        library."text" ILIKE '%' || $4 || '%'
        OR $4 IS NULL
    )
ORDER BY library.id
LIMIT $5 OFFSET $6
`

type ListWithFiltersParams struct {
	Column1     sql.NullString `json:"column_1"`
	Column2     sql.NullString `json:"column_2"`
	ReleaseDate time.Time      `json:"releaseDate"`
	Column4     sql.NullString `json:"column_4"`
	Limit       int32          `json:"limit"`
	Offset      int32          `json:"offset"`
}

type ListWithFiltersRow struct {
	ID          int32     `json:"id"`
	Group       string    `json:"group"`
	Song        string    `json:"song"`
	ReleaseDate time.Time `json:"releaseDate"`
	Text        string    `json:"text"`
	Link        string    `json:"link"`
}

func (q *Queries) ListWithFilters(ctx context.Context, arg ListWithFiltersParams) ([]ListWithFiltersRow, error) {
	rows, err := q.db.QueryContext(ctx, listWithFilters,
		arg.Column1,
		arg.Column2,
		arg.ReleaseDate,
		arg.Column4,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListWithFiltersRow
	for rows.Next() {
		var i ListWithFiltersRow
		if err := rows.Scan(
			&i.ID,
			&i.Group,
			&i.Song,
			&i.ReleaseDate,
			&i.Text,
			&i.Link,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update = `-- name: Update :exec
UPDATE library
SET "releaseDate" = COALESCE(
        NULLIF($2::date, '0001-01-01'::date),
        "releaseDate"
    ),
    "text" = COALESCE(NULLIF($3, ''), "text"),
    link = COALESCE(NULLIF($4, ''), link)
WHERE id = $1
`

type UpdateParams struct {
	ID      int32       `json:"id"`
	Column2 time.Time   `json:"column_2"`
	Column3 interface{} `json:"column_3"`
	Column4 interface{} `json:"column_4"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) error {
	_, err := q.db.ExecContext(ctx, update,
		arg.ID,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	return err
}
