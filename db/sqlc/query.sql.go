// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const add = `-- name: Add :one
INSERT INTO library ("group", song)
VALUES ($1, $2)
RETURNING id, "group", song, "releaseDate", text, link
`

type AddParams struct {
	Group string `json:"group"`
	Song  string `json:"song"`
}

func (q *Queries) Add(ctx context.Context, arg AddParams) (Library, error) {
	row := q.db.QueryRowContext(ctx, add, arg.Group, arg.Song)
	var i Library
	err := row.Scan(
		&i.ID,
		&i.Group,
		&i.Song,
		&i.ReleaseDate,
		&i.Text,
		&i.Link,
	)
	return i, err
}

const delete = `-- name: Delete :exec
DELETE FROM library
WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, delete, id)
	return err
}

const fetch = `-- name: Fetch :exec
UPDATE library
SET "releaseDate" = $2,
    text = $3,
    link = $4
WHERE id = $1
`

type FetchParams struct {
	ID          int32     `json:"id"`
	ReleaseDate time.Time `json:"releaseDate"`
	Text        string    `json:"text"`
	Link        string    `json:"link"`
}

func (q *Queries) Fetch(ctx context.Context, arg FetchParams) error {
	_, err := q.db.ExecContext(ctx, fetch,
		arg.ID,
		arg.ReleaseDate,
		arg.Text,
		arg.Link,
	)
	return err
}

const getOne = `-- name: GetOne :one
SELECT id, "group", song, "releaseDate", text, link
FROM library
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetOne(ctx context.Context, id int32) (Library, error) {
	row := q.db.QueryRowContext(ctx, getOne, id)
	var i Library
	err := row.Scan(
		&i.ID,
		&i.Group,
		&i.Song,
		&i.ReleaseDate,
		&i.Text,
		&i.Link,
	)
	return i, err
}

const list = `-- name: List :many
SELECT id, "group", song, "releaseDate", text, link
FROM library
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) List(ctx context.Context, arg ListParams) ([]Library, error) {
	rows, err := q.db.QueryContext(ctx, list, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Library
	for rows.Next() {
		var i Library
		if err := rows.Scan(
			&i.ID,
			&i.Group,
			&i.Song,
			&i.ReleaseDate,
			&i.Text,
			&i.Link,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAll = `-- name: ListAll :many
SELECT id, "group", song, "releaseDate", text, link
FROM library
ORDER BY id
`

func (q *Queries) ListAll(ctx context.Context) ([]Library, error) {
	rows, err := q.db.QueryContext(ctx, listAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Library
	for rows.Next() {
		var i Library
		if err := rows.Scan(
			&i.ID,
			&i.Group,
			&i.Song,
			&i.ReleaseDate,
			&i.Text,
			&i.Link,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update = `-- name: Update :exec
UPDATE library
SET "releaseDate" = $2,
    text = $3,
    link = $4
WHERE id = $1
`

type UpdateParams struct {
	ID          int32     `json:"id"`
	ReleaseDate time.Time `json:"releaseDate"`
	Text        string    `json:"text"`
	Link        string    `json:"link"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) error {
	_, err := q.db.ExecContext(ctx, update,
		arg.ID,
		arg.ReleaseDate,
		arg.Text,
		arg.Link,
	)
	return err
}
